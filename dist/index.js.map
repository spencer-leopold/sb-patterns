{"version":3,"sources":["../src/baseRenderEngine.ts","../src/Property.ts","../src/Field.ts","../src/utils.ts","../node_modules/ts-dedent/src/index.ts","../src/PatternVariant.ts","../src/Setting.ts","../src/Pattern.ts","../src/ReactDefaultRenderer.tsx","../src/PatternStorage.ts","../src/PatternPreview.tsx","../src/index.ts"],"names":["baseRenderEngine_exports","__export","getNamespaces","getPatternConfiguration","getRenderer","renderPattern","renderPatternPreview","setNamespaces","setRenderer","randFullName","randLine","randParagraph","randSentence","randWord","seed","parse","Property","name","type","label","description","preview","value","_preview","token","fakeOptions","tokens","result","e","input","output","MultiValueTypes","Field","multiValue","mergeDeep","objects","isObject","obj","prev","key","pVal","oVal","isNullOrUndefined","dedent","templ","values","_i","strings","indentLengths","arr","str","matches","match","_a","_b","pattern_1","string","i","endentations","endentation","indentedValue","esm_default","PatternVariant","id","pattern","variant","use","configuration","variables","settings","setting","withBlock","argsBlock","blocks","generatedCode","_key","field","fields","fieldItem","parentVariables","item","rootVariables","previewPatterns","args","handler","includeFields","includeSettings","includeVariant","Pattern","Setting","options","optionKey","defaultValue","required","_Pattern","definition","storage","iconPath","namespace","app","apps","variantId","variantKeys","settingsConfiguration","variantsDefinitions","isFirst","variantKey","cleanedSettings","optionName","option","variantDefinition","variantConfiguration","mergedConfiguration","keys","firstOption","multiValueType","settingKey","fieldKey","React","ReactDefaultRenderer","Component","getStorage","rendererImpl","namespacesImpl","renderer","namespaces","patternId","renderInfoContext","err","renderInfo","promisedPreview","promisedPreviewNames","patternVariables","previewRenderedVariables","index","promisedPreviewValue","nameKeys","fieldName","delta","finalVariables","buildBaseVariables","passedVariables","PatternStorage","useVal","component","resultingPattern","extend","basePattern","basePatternType","basePatternField","basePatternDefinition","basePatternTypes","resultingPatternType","definitions","contexts","context","fileExports","patternDefinition","parameters","hierachy","namespaceParts","pattern_key","pathAry","folderName","mappedNamespace","namespaceMap","componentFile","PatternPreview","finalPatternId","finalVariantId","PatternPreview_default","getStorybookControlsOptions","controls","argTypes","resultArgTypes","defaultArgs","resultArgs"],"mappings":"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","sourcesContent":["import IRenderer from \"./IRenderer\";\nimport { MultiValueTypes } from \"./Field\";\nimport { Namespaces } from \"./definition\";\nimport Pattern from \"./Pattern\";\nimport PatternVariant from \"./PatternVariant\";\nimport { ReactDefaultRenderer } from \"./ReactDefaultRenderer\";\nimport { ReactElement } from \"react\";\nimport { getStorage } from \"./index\";\n\nconst storage = getStorage();\n\nlet rendererImpl: IRenderer = new ReactDefaultRenderer();\nlet namespacesImpl: Namespaces = {};\n\nexport function setRenderer(renderer: IRenderer) {\n  rendererImpl = renderer;\n}\n\nexport function setNamespaces(namespaces: Namespaces) {\n  namespacesImpl = namespaces;\n}\n\nexport function getNamespaces(): Namespaces {\n  return namespacesImpl;\n}\n\nexport function getRenderer(): IRenderer {\n  return rendererImpl;\n}\n\nexport function getPatternConfiguration(\n  patternId: string,\n  variantId: string = Pattern.DEFAULT_VARIANT_NAME,\n  configuration: string\n) {\n  const variant: PatternVariant = storage.loadVariant(patternId, variantId);\n  const config = variant.getConfiguration();\n  return config[configuration] || \"\";\n}\n\nexport function renderPatternPreview(\n  patternId: string,\n  variables: any = {},\n  variantId: string = Pattern.DEFAULT_VARIANT_NAME,\n  renderInfoContext: any = {}\n): ReactElement<any, any> | null {\n  let variant: PatternVariant;\n  try {\n    variant = storage.loadVariant(patternId, variantId);\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n\n  const renderInfo = { ...variant.getRenderInfo(), ...renderInfoContext };\n  const promisedPreview: any = {};\n  const promisedPreviewNames: any[] = [];\n  let i = 0;\n  Object.keys(renderInfo).forEach((key: string) => {\n    promisedPreview[i] = renderPatternPreview(\n      renderInfo[key].patternId,\n      renderInfo[key].variables,\n      renderInfo[key].variant,\n      renderInfo[key]?.children || {}\n    );\n\n    promisedPreviewNames[i] = key;\n    i += 1;\n  });\n\n  const patternVariables = variant.getVariables();\n  if (Object.keys(promisedPreview).length !== 0) {\n    const previewRenderedVariables: any = {};\n    Object.keys(promisedPreview).map((value: string) => {\n      const index = +value;\n      const promisedPreviewValue = promisedPreview[index];\n      const nameKeys = promisedPreviewNames[index].split(\"--\");\n      // Handling multi value fields.\n      // Multi value patterns uses key--i as field name.\n      if (nameKeys.length === 1) {\n        previewRenderedVariables[nameKeys[0]] = promisedPreviewValue;\n      } else {\n        const fieldName = nameKeys[0];\n        const delta: number = Number.parseInt(nameKeys[1], 10);\n        if (\n          variant.getField(fieldName).multiValueType() === MultiValueTypes.items\n        ) {\n          if (typeof previewRenderedVariables[nameKeys[0]] === \"undefined\") {\n            previewRenderedVariables[nameKeys[0]] = [];\n          }\n          previewRenderedVariables[nameKeys[0]][delta] = promisedPreviewValue;\n        } else if (\n          variant.getField(fieldName).multiValueType() ===\n          MultiValueTypes.field_items\n        ) {\n          if (typeof previewRenderedVariables[nameKeys[0]] === \"undefined\") {\n            previewRenderedVariables[nameKeys[0]] = [];\n          }\n          previewRenderedVariables[nameKeys[0]][delta] = {\n            content: promisedPreviewValue,\n          };\n        } else if (\n          variant.getField(fieldName).multiValueType() ===\n          MultiValueTypes.single_value\n        ) {\n          if (typeof previewRenderedVariables[nameKeys[0]] === \"undefined\") {\n            previewRenderedVariables[nameKeys[0]] = [promisedPreviewValue];\n          } else {\n            previewRenderedVariables[nameKeys[0]].push(promisedPreviewValue);\n          }\n        } else {\n          previewRenderedVariables[\n            nameKeys[0]\n          ] = `No multi value type for field: '${variant\n            .getPattern()\n            .getId()}:${fieldName}:${variant\n            .getField(fieldName)\n            .multiValueType()}'`;\n        }\n      }\n    });\n    const finalVariables: any = {\n      ...patternVariables,\n      ...buildBaseVariables(variables),\n    };\n    Object.keys(previewRenderedVariables).forEach((key) => {\n      // Overwrite variables with rendered ones.\n      if (finalVariables[key] !== null) {\n        finalVariables[key] = previewRenderedVariables[key];\n      }\n    });\n    return renderPattern(patternId, finalVariables, variantId);\n  }\n\n  return renderPattern(\n    patternId,\n    {\n      ...patternVariables,\n      ...buildBaseVariables(variables),\n    },\n    variantId\n  );\n}\n\nfunction buildBaseVariables(variables: any) {\n  let passedVariables = variables;\n  if (variables instanceof Map) {\n    const obj: Record<string, any> = {};\n    variables.forEach((value, key) => {\n      obj[key] = value;\n    });\n    passedVariables = obj;\n  }\n  return passedVariables;\n}\n\nexport function renderPattern(\n  patternId: string,\n  variables: any = {},\n  variantId: string = Pattern.DEFAULT_VARIANT_NAME\n): ReactElement<any, any> | null {\n  try {\n    const variant: PatternVariant = storage.loadVariant(patternId, variantId);\n    const patternVariables = variant.getVariables(false);\n    const finalVariables = {\n      ...patternVariables,\n      ...buildBaseVariables(variables),\n    };\n    finalVariables.variant = variantId;\n    variant.setRenderArgs(finalVariables);\n    return rendererImpl.renderVariant(variant, finalVariables);\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n","import { randFullName, randLine, randParagraph, randSentence, randWord, seed } from '@ngneat/falso';\n\nimport { Faker } from './definition';\nimport parse from 'html-react-parser';\n\n/**\n * Class representing a pattern definition property.\n */\nexport default class Property {\n  /**\n   * The property name.\n   */\n  private name: string;\n\n  /**\n   * The property type.\n   */\n  private type: string;\n\n  /**\n   * The property label.\n   */\n  private label: string;\n\n  /**\n   * The property description.\n   */\n  private description: string;\n\n  /**\n   * The property preview.\n   */\n  private preview: any;\n\n  /**\n   * Whether the property is enabled or not.\n   */\n  private enable = true;\n\n  /**\n   * Constructs a Property object.\n   */\n  constructor(name: string, type: string, label: string, description: string, preview: any) {\n    this.name = name;\n    this.type = type;\n    this.label = label;\n    this.description = description;\n    this.preview = preview;\n  }\n\n  /**\n   * Get the property description.\n   */\n  public getDescription(): string {\n    return typeof this.description === 'undefined' ? '' : this.description;\n  }\n\n  /**\n   * Set the property description.\n   */\n  public setDescription(value: string) {\n    this.description = value;\n  }\n\n  /**\n   * Get the property enable value.\n   */\n  public isEnable(): boolean {\n    return this.enable;\n  }\n\n  /**\n   * Set the property enable value.\n   */\n  public setEnable(value: boolean) {\n    this.enable = value;\n  }\n\n  /**\n   * Generate a fake value for the property preview.\n   */\n  private generateFake(_preview: Faker | string): string {\n    let token = 'lorem.word';\n    let fakeOptions = {};\n\n    if (typeof _preview === 'string') {\n      token = _preview;\n    } else {\n      if (_preview.token == null && _preview.property != null) {\n        token = _preview.property;\n      }\n      if (_preview.token != null) {\n        token = _preview.token;\n      }\n      fakeOptions = _preview.options ?? {};\n    }\n\n    try {\n      if (process.env.STORYBOOK_PATTERN_FAKER_SEED != null) {\n        if (!Number.isNaN(process.env.STORYBOOK_PATTERN_FAKER_SEED)) {\n          seed(process.env.STORYBOOK_PATTERN_FAKER_SEED);\n        } else {\n          console.error('STORYBOOK_PATTERN_FAKER_SEED must be numeric');\n        }\n      }\n\n      const tokens: Record<string, any> = {\n        'lorem.fullName': randFullName,\n        'lorem.word': randWord,\n        'lorem.sentence': randSentence,\n        'lorem.paragraph': randParagraph,\n        'lorem.paragraphs': randParagraph,\n        'lorem.line': randLine,\n      };\n\n      if (!tokens[token]) {\n        return `Invalid faker token: ${token}. Valid tokens are: ${Object.keys(tokens).join(', ')}`;\n      }\n\n      const result = tokens[token](fakeOptions);\n      return Array.isArray(result) ? result.join(' ') : result;\n    } catch (e) {\n      if (e instanceof Error) {\n        return `Invalid faker configuration \"${token}\". ${e.message}`;\n      }\n      return '';\n    }\n  }\n\n  /**\n   * Clean a string.\n   */\n  private cleanString(input: string) {\n    let output = '';\n    for (let i = 0; i < input.length; i += 1) {\n      if (\n        input.charCodeAt(i) <= 127 ||\n        (input.charCodeAt(i) >= 160 && input.charCodeAt(i) <= 255)\n      ) {\n        output += input.charAt(i);\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Get the property preview.\n   */\n  public getPreview(): any {\n    if (typeof this.preview === 'object') {\n      if (this.preview?.faker) {\n        return this.generateFake(this.preview.faker);\n      }\n\n      if (this.type === 'pattern' || this.type === 'object' || this.type === 'media_library') {\n        // Convert string html into jsx.\n        if (Array.isArray(this.preview)) {\n          this.preview = this.preview.map((preview) => {\n            if (typeof preview === 'string') {\n              return parse(this.cleanString(preview));\n            }\n            return preview;\n          });\n        }\n        return this.preview;\n      }\n\n      return JSON.stringify(this.preview);\n    }\n\n    let value = this.preview;\n    if (typeof value === 'string') {\n      value = parse(this.cleanString(value));\n    }\n    return value;\n  }\n\n  /**\n   * Set the property preview.\n   */\n  public setPreview(value: any | undefined) {\n    this.preview = value;\n  }\n\n  /**\n   * Get the property label.\n   */\n  public getLabel(): string {\n    return this.label;\n  }\n\n  /**\n   * Set the property label.\n   */\n  public setLabel(value: string) {\n    this.label = value;\n  }\n\n  /**\n   * Get the property name.\n   */\n  public getName(): string {\n    return this.name;\n  }\n\n  /**\n   * Set the property name.\n   */\n  public setName(value: string) {\n    this.name = value;\n  }\n\n  /**\n   * Get the property type.\n   */\n  public getType(): string {\n    return this.type;\n  }\n\n  /**\n   * Set the property type.\n   */\n  public setType(value: string) {\n    this.type = value;\n  }\n}\n","import Property from './Property';\n\nexport enum MultiValueTypes {\n  items = 'items',\n  field_items = 'field_items',\n  single_value = 'single_value',\n}\n\nexport default class Field extends Property {\n  private multiValue: any;\n\n  public multiValueType(): MultiValueTypes {\n    return this.multiValue;\n  }\n\n  public setMultiValueType(multiValue: MultiValueTypes) {\n    this.multiValue = multiValue;\n  }\n}\n","import { AnyConfiguration, Properties } from './definition';\n\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n * @param objects Two or more objects to merge.\n * @returns A single, merged object.\n */\nexport function mergeDeep(\n  ...objects: (AnyConfiguration | Properties)[]\n): AnyConfiguration | Properties {\n  const isObject = (obj: any) => obj && typeof obj === 'object';\n\n  return objects.reduce((prev, obj) => {\n    Object.keys(obj).forEach((key) => {\n      const pVal = prev[key];\n      const oVal = obj[key];\n\n      if (Array.isArray(pVal) && Array.isArray(oVal)) {\n        prev[key] = pVal.concat(...oVal);\n      } else if (isObject(pVal) && isObject(oVal)) {\n        prev[key] = mergeDeep(pVal, oVal);\n      } else {\n        prev[key] = oVal;\n      }\n    });\n\n    return prev;\n  }, {});\n}\n\n/**\n * Checks if a value **is** null or undefined.\n * @param value The value to evaluate.\n * @returns Whether the value **is** null or undefined.\n */\nexport function isNullOrUndefined<T>(value: T | null | undefined): value is null | undefined {\n  return typeof value === 'undefined' || value === null;\n}\n","export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n","import Field from \"./Field\";\nimport IPatternStorage from \"./IPatternStorage\";\nimport Pattern from \"./Pattern\";\nimport Setting from \"./Setting\";\nimport dedent from \"ts-dedent\";\n\nexport default class PatternVariant {\n  private pattern: Pattern;\n\n  private id: string;\n\n  private use: string;\n\n  private variant: string;\n\n  private renderArgs: any = {};\n\n  private beforeRenderHandler: any;\n\n  private label: string;\n\n  private description: string;\n\n  private configuration: any;\n\n  private fields: Record<string, Field> = {};\n\n  private settings: Record<string, Setting> = {};\n\n  private cleanStorybookString(string: string) {\n    return string.toLowerCase().replace(/ /g, \"-\").replace(/\\//g, \"-\");\n  }\n\n  constructor(\n    id: string,\n    pattern: Pattern,\n    variant: string,\n    use: string,\n    label: string,\n    description: string,\n    configuration: any\n  ) {\n    this.id = id;\n    this.pattern = pattern;\n    this.variant = variant;\n    this.label = label;\n    this.use = use;\n    this.description = description;\n    this.configuration = configuration;\n  }\n\n  public getUse(): string {\n    if (!this.use) {\n      return this.getPattern().getUse();\n    }\n    return this.use;\n  }\n\n  public getCode() {\n    const variables: any = { variant: \"\" };\n    const settings = this.getSettings();\n\n    if (this.getId() !== \"__default\") {\n      variables.variant = this.getId();\n    } else {\n      delete variables.variant;\n    }\n\n    Object.keys(settings).forEach((key: string) => {\n      const setting = settings[key];\n      if (setting.getType() !== \"media_library\" && setting.isEnable()) {\n        variables[key] = setting.getPreview();\n      }\n    });\n\n    const withBlock =\n      Object.keys(variables).length === 0\n        ? \"\"\n        : `with ${JSON.stringify(variables, null, 2)}`;\n    delete variables.variant;\n    const argsBlock =\n      Object.keys(variables).length === 0\n        ? \"''\"\n        : `${JSON.stringify(variables, null, 2)}`;\n    const blocks = [\n      {\n        title: \"Pattern function (recommended)\",\n        code: dedent`\n          import { pattern } from '@cmbr/sb-patterns';\n          ...\n          return (\n            <>\n              {pattern('${this.getPattern().getId()}', ${argsBlock}, '${this.getId()}')}\n            </>\n          );\n          ...\n        `,\n      },\n      {\n        title: \"As a component\",\n        code: dedent`\n          import { ComponentName } from '@cmbr/sb-patterns';\n          TODO: Finish documenting this.\n          ...\n          return (\n            <>\n              <ComponentName ${withBlock} />\n            </>\n          );\n          ...\n        `,\n      },\n    ];\n    const generatedCode: string[] = [];\n    Object.entries(blocks).forEach(([_key, value]) => {\n      return generatedCode.push(dedent`\n       /**\n        * ${value.title}:\n        */\n        ${value.code}\n      `);\n    });\n    return generatedCode.join(\"\\n\\n\");\n  }\n\n  public getStoryId(): string {\n    const pattern = this.getPattern();\n    return this.cleanStorybookString(\n      `${pattern.getNamespace()}-${pattern.getLabel()}--${this.getLabel()}`\n    );\n  }\n\n  public getId(): string {\n    return this.id;\n  }\n\n  public getStorage(): IPatternStorage {\n    return this.pattern.getStorage();\n  }\n\n  public getLabel(): string {\n    return this.label;\n  }\n\n  public getDescription(): string {\n    return this.description;\n  }\n\n  public getPattern(): Pattern {\n    return this.pattern;\n  }\n\n  public setPattern(pattern: Pattern) {\n    this.pattern = pattern;\n  }\n\n  public getVariant(): string {\n    return this.variant;\n  }\n\n  public setVariant(value: string) {\n    this.variant = value;\n  }\n\n  public getFields(): Record<string, Field> {\n    return this.fields;\n  }\n\n  public setConfiguration(configuration: any) {\n    this.configuration = configuration;\n  }\n\n  public getConfiguration(): any {\n    return this.configuration;\n  }\n\n  public addField(field: Field) {\n    this.fields[field.getName()] = field;\n  }\n\n  public getField(name: string): Field {\n    return this.fields[name];\n  }\n\n  public setFields(fields: Record<string, Field>) {\n    this.fields = fields;\n  }\n\n  public getSettings(): Record<string, Setting> {\n    return this.settings;\n  }\n\n  public setSettings(value: Record<string, Setting>) {\n    this.settings = value;\n  }\n\n  public getSetting(name: string): Setting {\n    return this.settings[name];\n  }\n\n  public addSetting(setting: Setting) {\n    this.settings[setting.getName()] = setting;\n  }\n\n  private handleFieldItem(fieldItem: any) {\n    const variant = fieldItem.variant !== null ? fieldItem.variant : null;\n    const fields = fieldItem.fields != null ? fieldItem.fields : {};\n    const settings = fieldItem.settings != null ? fieldItem.settings : {};\n    const objects = Object.assign(fields, settings);\n    return {\n      patternId: fieldItem.id,\n      variant,\n      fields,\n      settings,\n      variables: objects,\n    };\n  }\n\n  private handleSubPreviewPattern(preview: any, parentVariables: any) {\n    if (preview.fields !== undefined) {\n      Object.keys(preview.fields).forEach((key) => {\n        const field = preview.fields[key];\n        if (field != null && field.id !== undefined) {\n          if (parentVariables.children === undefined) {\n            parentVariables.children = {};\n          }\n          parentVariables.children[key] = this.handleFieldItem(field);\n          this.handleSubPreviewPattern(field, parentVariables.children[key]);\n        } else if (Array.isArray(field)) {\n          let i = 0;\n          if (parentVariables.children === undefined) {\n            parentVariables.children = {};\n          }\n          field.forEach((item) => {\n            if (item.id !== undefined) {\n              parentVariables.children[`${key}--${i}`] =\n                this.handleFieldItem(item);\n              this.handleSubPreviewPattern(\n                item,\n                parentVariables.children[`${key}--${i}`]\n              );\n              i += 1;\n            }\n          });\n        }\n      });\n    }\n  }\n\n  private buildPreviewPattern(preview: any) {\n    const rootVariables = this.handleFieldItem(preview);\n    this.handleSubPreviewPattern(preview, rootVariables);\n    return rootVariables;\n  }\n\n  public getRenderInfo() {\n    const previewPatterns: Record<string, any> = {};\n    Object.keys(this.fields).forEach((key) => {\n      const field: Field = this.fields[key];\n      const preview = field.getPreview();\n      if (field.getType() === \"pattern\" && Array.isArray(preview)) {\n        for (let i = 0; i < preview.length; i += 1) {\n          previewPatterns[`${key}--${i}`] = this.buildPreviewPattern(\n            preview[i]\n          );\n        }\n      } else if (field.getType() === \"pattern\" && preview?.id) {\n        previewPatterns[key] = this.buildPreviewPattern(preview);\n      }\n    });\n    Object.keys(this.settings).forEach((key) => {\n      const setting: Setting = this.settings[key];\n      const preview = setting.getPreview();\n      if (setting.getType() === \"media_library\" && preview?.id) {\n        previewPatterns[key] = this.buildPreviewPattern(preview);\n      }\n    });\n    return previewPatterns;\n  }\n\n  public setRenderArgs(args: any) {\n    this.renderArgs = args;\n    if (this.beforeRenderHandler != null) {\n      this.beforeRenderHandler(args);\n    }\n  }\n\n  public getRenderArgs() {\n    return this.renderArgs;\n  }\n\n  public beforeRender(handler: any) {\n    this.beforeRenderHandler = handler;\n  }\n\n  public getVariables(\n    includeFields = true,\n    includeSettings = true,\n    includeVariant = true\n  ) {\n    const values: Record<string, any> = {\n      variant: undefined,\n    };\n    if (this.variant !== Pattern.DEFAULT_VARIANT_NAME && includeVariant) {\n      values.variant = this.variant;\n    }\n    if (includeFields) {\n      Object.keys(this.fields).forEach((key) => {\n        const field: Field = this.fields[key];\n        if (field !== null && field.getType() !== \"pattern\") {\n          values[key] = field.getPreview();\n        }\n      });\n    }\n\n    if (includeSettings) {\n      Object.keys(this.settings).forEach((key) => {\n        if (this.settings[key].getType() !== \"media_library\") {\n          values[key] = this.settings[key].getPreview();\n        }\n      });\n    }\n    return values;\n  }\n}\n","import { Options, OptionsWithConfiguration } from './definition';\n\nimport Property from './Property';\n\nexport default class Setting extends Property {\n  private defaultValue = '';\n\n  private required = false;\n\n  private options: Options | OptionsWithConfiguration = {};\n\n  public getOptions(): Options | OptionsWithConfiguration {\n    return this.options;\n  }\n\n  public setOptions(options: Options | OptionsWithConfiguration) {\n    this.options = options;\n  }\n\n  public getOptionKeyByLabel(label: string): string {\n    let optionKey = '';\n    Object.keys(this.options).forEach((key) => {\n      if (this.options[key] === label) {\n        optionKey = key;\n      }\n    });\n    return optionKey;\n  }\n\n  public getPreviewDisplayValue(): string {\n    if (this.getType() === 'select' && this.getPreview()) {\n      const preview = this.options[this.getPreview()];\n      if (typeof preview === 'string') {\n        return preview;\n      }\n    }\n    return this.getPreview();\n  }\n\n  public getDefaultValue() {\n    return this.defaultValue;\n  }\n\n  public setDefaultValue(defaultValue: string) {\n    this.defaultValue = defaultValue;\n  }\n\n  public isRequired(): boolean {\n    return this.required;\n  }\n\n  public setRequired(required: boolean) {\n    this.required = required;\n  }\n}\n","import Field, { MultiValueTypes } from \"./Field\";\nimport {\n  IPatternDefinition,\n  Options,\n  Properties,\n  Property,\n  Variants,\n} from \"./definition\";\nimport { isNullOrUndefined, mergeDeep } from \"./utils\";\n\nimport { ComponentType } from \"react\";\nimport IPatternStorage from \"./IPatternStorage\";\nimport PatternVariant from \"./PatternVariant\";\nimport Setting from \"./Setting\";\n\ninterface CleanedOptions {\n  [key: string]: Options;\n}\n\nexport default class Pattern {\n  public static DEFAULT_VARIANT_NAME = \"__default\";\n\n  private id: string;\n\n  private label: string;\n\n  private description: string;\n\n  private iconPath: string | undefined;\n\n  private namespace: string;\n\n  private parameters: any;\n\n  private use: string;\n\n  private visible: string;\n\n  private definition: IPatternDefinition;\n\n  private patternVariants: Record<string, PatternVariant> = {};\n\n  private defaultVariant: PatternVariant;\n\n  private storage: IPatternStorage;\n\n  public getComponent(): ComponentType {\n    return this.storage.getComponent(this.getUse());\n  }\n\n  public getUse(): string {\n    return this.use;\n  }\n\n  public getStoryName(): string {\n    return `${this.getNamespace()}/${this.getLabel()}`;\n  }\n\n  public getLabel(): string {\n    return this.label;\n  }\n\n  public getIconPath(): string | undefined {\n    return this.iconPath;\n  }\n\n  public setIconPath(iconPath: string): void {\n    this.iconPath = iconPath;\n  }\n\n  public getNamespace(): string {\n    return this.namespace;\n  }\n\n  public setNamespace(namespace: string): void {\n    this.namespace = namespace;\n  }\n\n  public getDescription(): string {\n    return this.description;\n  }\n\n  public getId(): string {\n    return this.id;\n  }\n\n  public getDefaultVariant(): PatternVariant {\n    return this.defaultVariant;\n  }\n\n  public isVisible(app: string) {\n    if (this.visible == null || this.visible === \"\") {\n      return true;\n    }\n    const apps = this.visible.split(\"|\");\n    for (let i = 0; i < apps.length; i += 1) {\n      if (apps[i].trim() === app) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  constructor(\n    id: string,\n    definition: IPatternDefinition,\n    storage: IPatternStorage\n  ) {\n    this.id = id;\n    this.label = definition.label;\n    this.description = definition.description;\n    this.visible = definition.visible;\n    this.storage = storage;\n    this.use = definition.use;\n    this.iconPath = definition.icon_path?.replace(\"ws-assets://\", \"\");\n    this.namespace = definition.namespace;\n    this.parameters = definition.parameters;\n    this.definition = definition;\n    this.defaultVariant = new PatternVariant(\n      \"__default\",\n      this,\n      Pattern.DEFAULT_VARIANT_NAME,\n      this.use,\n      this.label,\n      this.description,\n      definition.configuration\n    );\n    this.initializeVariants();\n  }\n\n  getPatternVariants() {\n    return this.patternVariants;\n  }\n\n  public getVariant(id: string = Pattern.DEFAULT_VARIANT_NAME) {\n    const variantId =\n      id === \"\" || id == null ? Pattern.DEFAULT_VARIANT_NAME : id;\n    if (this.patternVariants[variantId] == null) {\n      throw new Error(\n        `Variant \"${id}\" not found in pattern \"${this.getId()}\". Possible Variants are: \"${Object.keys(\n          this.patternVariants\n        ).join(\", \")}\"`\n      );\n    }\n    return this.patternVariants[variantId];\n  }\n\n  public getParameters(): any {\n    return this.parameters;\n  }\n\n  public getStorage(): IPatternStorage {\n    return this.storage;\n  }\n\n  private initializeVariants() {\n    const variantKeys: string[] = [];\n    const settings: Properties = this.definition.settings ?? {};\n    const fields: Properties = this.definition.fields ?? {};\n\n    const settingsConfiguration: any = {};\n\n    const configuration: any = this.definition.configuration ?? {};\n    const variantsDefinitions: Variants = this.definition.variants ?? {};\n\n    Object.keys(variantsDefinitions).forEach((key: string) => {\n      variantKeys.push(key);\n    });\n\n    if (variantKeys.length === 0) {\n      variantKeys.push(Pattern.DEFAULT_VARIANT_NAME);\n    }\n    let isFirst = true;\n    variantKeys.forEach((variantKey: string) => {\n      const cleanedSettings: CleanedOptions = {};\n      Object.entries(settings).forEach(([name, setting]) => {\n        if (setting.options) {\n          const options: Options = {};\n          Object.entries(setting.options).forEach(([optionName, option]) => {\n            const skipOption =\n              option?.condition?.variant &&\n              option?.condition?.variant !== variantKey;\n            if (!skipOption) {\n              if (option.configuration) {\n                if (!settingsConfiguration[name]) {\n                  settingsConfiguration[name] = {};\n                }\n                settingsConfiguration[name][optionName] = option.configuration;\n                options[optionName] = option.label;\n              } else {\n                options[optionName] = option;\n              }\n            }\n          });\n          cleanedSettings[name] = options;\n        }\n      });\n\n      const variantDefinition =\n        variantsDefinitions[variantKey] ?? this.definition;\n      const label = variantDefinition.label ?? this.label;\n      const use = variantDefinition.use ?? this.use;\n      const description = variantDefinition.description ?? \"\";\n\n      const variantConfiguration =\n        variantDefinition.configuration != null\n          ? variantDefinition.configuration\n          : {};\n      const mergedConfiguration = mergeDeep(\n        configuration,\n        settingsConfiguration,\n        variantConfiguration\n      );\n\n      const variant = new PatternVariant(\n        variantKey,\n        this,\n        variantKey,\n        use,\n        label,\n        description,\n        mergedConfiguration\n      );\n\n      if (isFirst === true) {\n        this.defaultVariant = variant;\n      }\n      isFirst = false;\n\n      Object.keys(settings).forEach((key: string) => {\n        const setting = new Setting(\n          key,\n          settings[key].type,\n          settings[key].label,\n          settings[key].description ?? \"\",\n          settings[key].preview\n        );\n        setting.setRequired(!!settings[key].required);\n        setting.setOptions(cleanedSettings[key]);\n        if (settings[key].default_value) {\n          setting.setDefaultValue(settings[key].default_value ?? \"\");\n        }\n\n        if (settings[key].default_value) {\n          setting.setPreview(settings[key].default_value ?? null);\n        }\n        if (\n          !setting.getPreview() &&\n          settings[key].required === true &&\n          settings[key].type === \"select\"\n        ) {\n          const keys = Object.keys(cleanedSettings[key]);\n          if (keys.length > 0) {\n            const firstOption = keys[0];\n            setting.setPreview(firstOption);\n          }\n        }\n        variant.addSetting(setting);\n      });\n\n      Object.keys(fields).forEach((key: string) => {\n        const field = new Field(\n          key,\n          fields[key].type,\n          fields[key].label,\n          fields[key].description || \"\",\n          fields[key].preview\n        );\n\n        field.setMultiValueType(MultiValueTypes.single_value);\n        if (fields[key].multi_value_type) {\n          const multiValueType = fields[key]\n            .multi_value_type as keyof typeof MultiValueTypes;\n          field.setMultiValueType(MultiValueTypes[multiValueType]);\n        } else if (Array.isArray(fields[key].preview)) {\n          field.setMultiValueType(MultiValueTypes.single_value);\n        }\n        variant.addField(field);\n      });\n\n      if (variantDefinition) {\n        if (variantDefinition.settings) {\n          Object.keys(variantDefinition.settings).forEach((key: string) => {\n            const setting: Setting = variant.getSetting(key);\n            const settingKey = key as keyof Property;\n            if (setting && !isNullOrUndefined(variantDefinition.settings)) {\n              setting.setPreview(variantDefinition.settings[settingKey]);\n              setting.setEnable(false);\n            } else {\n              console.warn(\n                `Invalid variant configuration. Setting with ${key} doesn't exists in variant. ${variant.getId()}`\n              );\n            }\n          });\n        }\n        if (variantDefinition.fields) {\n          Object.keys(variantDefinition.fields).forEach((key: string) => {\n            const field: Field = variant.getField(key);\n            const fieldKey = key as keyof Property;\n            if (field && !isNullOrUndefined(variantDefinition.fields)) {\n              field.setPreview(variantDefinition.fields[fieldKey]);\n              field.setEnable(false);\n            } else {\n              console.warn(\n                `Invalid variant configuration. Field with ${key} doesn't exists in variant. ${variant.getId()}`\n              );\n            }\n          });\n        }\n      }\n\n      this.patternVariants[variantKey] = variant;\n    });\n  }\n}\n","import React, { ReactElement } from 'react';\n\nimport IRenderer from './IRenderer';\nimport PatternVariant from './PatternVariant';\n\n/**\n * React default renderer.\n *\n * Overwrite the renderer inside the baseRenderEngine.\n * Use renderer.setRenderer(new CustomRenderer)\n * if you need a differnt render logic.\n */\nexport class ReactDefaultRenderer implements IRenderer {\n  renderVariant(variant: PatternVariant, variables: any): ReactElement<any, any> | null {\n    if (!variant) {\n      return <>Error while render variant. Variant is null.</>;\n    }\n\n    if (!variant.getPattern()) {\n      return <>`Error while render variant. Pattern is null. [ID: ${variant.getId()}]`</>;\n    }\n\n    if (!variant.getPattern().getComponent()) {\n      return (\n        <>\n          `Error while rendering variant. Component not linked to pattern [ID: $\n          {variant.getPattern().getId()}, PATH: ${variant.getPattern().getUse()}]`\n        </>\n      );\n    }\n\n    const Component = variant.getPattern().getComponent();\n    return <Component {...variables} />;\n  }\n}\n","import {\n  IPatternDefinition,\n  IPatternDefinitions,\n  Namespaces,\n  PatternDefinitionKey,\n} from \"./definition\";\n\nimport { ComponentType } from \"react\";\nimport IPatternStorage from \"./IPatternStorage\";\nimport Pattern from \"./Pattern\";\nimport PatternVariant from \"./PatternVariant\";\nimport { mergeDeep } from \"./utils\";\n\ninterface PatternCache {\n  [key: string]: Pattern;\n}\n\ninterface ComponentCache {\n  [key: string]: ComponentType;\n}\n\n/**\n * Class for storing patterns and their respective components.\n */\nexport default class PatternStorage implements IPatternStorage {\n  /**\n   * The components that have been registered.\n   */\n  private components: ComponentCache = {};\n\n  /**\n   * The namespaces that have been registered.\n   */\n  private namespaces: Namespaces = {};\n\n  /**\n   * The patterns that have been registered.\n   */\n  private patterns: PatternCache = {};\n\n  /**\n   * The pattern definitions that have been registered.\n   */\n  public definitions: IPatternDefinitions = {} as IPatternDefinitions;\n\n  /**\n   * The current pattern storage instance.\n   */\n  static instance: PatternStorage;\n\n  /**\n   * Get current or new instance of pattern storage.\n   */\n  static getInstance() {\n    if (!PatternStorage.instance) {\n      PatternStorage.instance = new PatternStorage();\n    }\n    return PatternStorage.instance;\n  }\n\n  /**\n   * Add a component to the storage.\n   */\n  addComponent(useVal: string, component: ComponentType) {\n    this.components[useVal] = component;\n  }\n\n  /**\n   * Get a component from the storage.\n   */\n  getComponent(useVal: string): ComponentType {\n    return this.components[useVal] || null;\n  }\n\n  /**\n   * Set the storage namespaces.\n   */\n  setNamespaces(namespaces: Namespaces) {\n    this.namespaces = namespaces;\n  }\n\n  /**\n   * Get the storage namespaces.\n   */\n  getNamespaces() {\n    return this.namespaces;\n  }\n\n  /**\n   * Get array of pattern ids.\n   */\n  getPatternIds(): string[] {\n    return Object.keys(this.definitions);\n  }\n\n  /**\n   * Extend pattern definition.\n   *\n   * This checks if the yaml definition has an extends property and if so\n   * it will extend the definition with the specified pattern definition.\n   */\n  private extendPatternDefinition(pattern: IPatternDefinition) {\n    const resultingPattern = pattern;\n    if (\n      pattern != null &&\n      pattern.extends != null &&\n      pattern.extends.length !== 0\n    ) {\n      pattern.extends.forEach((extend: string) => {\n        const [basePattern, basePatternType, basePatternField] =\n          extend.split(\".\");\n        if (this.definitions[basePattern] == null) {\n          throw new Error(\n            `Base pattern \"${basePattern}\" not found. Possible patterns ${Object.keys(\n              this.definitions\n            ).join(\", \")}`\n          );\n        }\n\n        const basePatternDefinition = this.extendPatternDefinition(\n          this.definitions[basePattern]\n        );\n        let basePatternTypes: PatternDefinitionKey[] = [];\n        if (basePatternType == null) {\n          basePatternTypes = [\"fields\", \"settings\"];\n          if (resultingPattern.use === undefined) {\n            resultingPattern.use = basePatternDefinition.use;\n          }\n        } else {\n          basePatternTypes = [basePatternType as PatternDefinitionKey];\n        }\n\n        basePatternTypes.forEach((type) => {\n          if (!basePatternField) {\n            if (basePatternDefinition[type]) {\n              resultingPattern[type] = mergeDeep(\n                basePatternDefinition[type] || {},\n                resultingPattern[type] || {}\n              );\n            }\n          } else if (basePatternDefinition[type]) {\n            const resultingPatternType = resultingPattern[type] || {};\n            const basePatternType = basePatternDefinition[type] || {};\n            resultingPatternType[basePatternField] =\n              basePatternType[basePatternField];\n            resultingPattern[type] = resultingPatternType;\n          }\n        });\n      });\n      resultingPattern.extends = [];\n    }\n    return resultingPattern;\n  }\n\n  /**\n   * Load a pattern.\n   *\n   * This will load from storage and create it from the definiton if it doesn't\n   * exist.\n   */\n  loadPattern(patternId: string): Pattern {\n    if (this.patterns[patternId]) {\n      return this.patterns[patternId];\n    }\n    const definition: IPatternDefinition = this.extendPatternDefinition(\n      this.definitions[patternId]\n    );\n    if (definition == null) {\n      throw new Error(\n        `Pattern definition \"${patternId}\" not found. Possible pattern ids are: \"${Object.keys(\n          this.definitions\n        ).join(\" ,\")}\"`\n      );\n    }\n    this.patterns[patternId] = new Pattern(patternId, definition, this);\n    return this.patterns[patternId];\n  }\n\n  /**\n   * Load a pattern variant.\n   */\n  loadVariant(patternId: string, variantId: string): PatternVariant {\n    const pattern: Pattern = this.loadPattern(patternId);\n    return pattern.getVariant(variantId);\n  }\n\n  /**\n   * Create a pattern definition.\n   */\n  createDefinitions(definitions: IPatternDefinitions): void {\n    this.definitions = definitions;\n    this.patterns = {};\n  }\n\n  /**\n   * Create a pattern definition from an array of require contexts.\n   */\n  createDefinitionsFromMultiContext(\n    contexts: __WebpackModuleApi.RequireContext[]\n  ): void {\n    this.patterns = {};\n\n    if (!Array.isArray(contexts)) {\n      contexts = [contexts];\n    }\n\n    contexts.forEach((context) => {\n      if (context != null) {\n        this.createDefinitionsFromContext(context);\n      }\n    });\n  }\n\n  /**\n   * Create a pattern definition from a require context.\n   */\n  createDefinitionsFromContext(\n    context: __WebpackModuleApi.RequireContext\n  ): void {\n    context.keys().forEach((key) => {\n      if (\n        key.includes(\"__tests__\") !== false ||\n        key.includes(\"__int_tests__\") !== false\n      ) {\n        return;\n      }\n\n      try {\n        const fileExports = context(key);\n        // Account for either yml or js exports.\n        // YAML definitions will most likely be overwitten, but they're\n        // required to populate all the variants at first so we don't get any\n        // errors when the JS executes.\n        if (\n          fileExports.default &&\n          (!fileExports.wingsuit || !fileExports.wingsuit.patternDefinition)\n        ) {\n          throw new Error(\"No wingsuit export found\");\n        }\n\n        const patternDefinition = fileExports.wingsuit\n          ? fileExports.wingsuit.patternDefinition\n          : fileExports;\n\n        if (\n          patternDefinition != null &&\n          typeof patternDefinition === \"object\"\n        ) {\n          const { parameters } = patternDefinition;\n          let { namespace } = patternDefinition;\n\n          if (namespace == null) {\n            const hierachy = key.split(\"/\");\n            if (hierachy.length > 2) {\n              // eslint-disable-next-line prefer-destructuring\n              namespace = hierachy[1];\n              const namespaceParts = namespace.split(\"-\");\n              if (namespaceParts.length > 1 && namespaceParts[0].length === 2) {\n                namespaceParts.shift();\n                namespace = namespaceParts.join(\"-\");\n                namespace =\n                  namespace.charAt(0).toUpperCase() + namespace.slice(1);\n              }\n            }\n          }\n\n          Object.keys(patternDefinition).forEach((pattern_key) => {\n            if (parameters !== null) {\n              patternDefinition[pattern_key].parameters = parameters;\n            }\n            if (patternDefinition[pattern_key].namespace == null) {\n              patternDefinition[pattern_key].namespace = namespace;\n            }\n            this.addDefinition(pattern_key, patternDefinition[pattern_key]);\n          });\n        }\n      } catch (e) {\n        console.error(\"Loading failed.\");\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * Create the component storage from an array of require contexts.\n   */\n  createComponentStorageFromContext(\n    contexts: __WebpackModuleApi.RequireContext[]\n  ): void {\n    contexts.forEach((context) => {\n      context.keys().forEach((key) => {\n        const formattedKey = key.replace(/\\.(ts|tsx|js|jsx)$/, \"\");\n        const pathAry = formattedKey.replace(\"./\", \"\").split(\"/\");\n        const folderName = pathAry[0];\n        let mappedNamespace = \"\";\n\n        Object.keys(this.namespaces).forEach((namespace) => {\n          const namespaceMap = this.namespaces[namespace].split(\"/\");\n\n          if (namespaceMap[namespaceMap.length - 1] === folderName) {\n            mappedNamespace = namespace;\n          }\n        });\n        pathAry.shift();\n\n        const prefix = mappedNamespace.startsWith(\"@\") ? \"\" : \"@\";\n        const useVal = `${prefix}${mappedNamespace}/${pathAry.join(\"/\")}`;\n        const componentFile = context(key);\n        if (componentFile.default) {\n          this.addComponent(useVal, componentFile.default);\n        }\n      });\n    });\n  }\n\n  /**\n   * Add a pattern definition.\n   */\n  addDefinition(id: string, patternDefinition: IPatternDefinition) {\n    this.definitions[id] = patternDefinition;\n    delete this.patterns[id];\n  }\n\n  /**\n   * Add multiple pattern definitions from a keyed object.\n   */\n  addDefinitions(definitions: IPatternDefinitions) {\n    Object.keys(definitions).forEach((id) => {\n      this.definitions[id] = definitions[id];\n      delete this.patterns[id];\n    });\n  }\n}\n","import * as BaseRenderEngine from './baseRenderEngine';\n\nimport { FunctionComponent } from 'react';\nimport PatternVariant from './PatternVariant';\n\ntype Props = {\n  patternId?: string;\n  variantId?: string;\n  variant?: PatternVariant;\n};\n\nconst renderer = BaseRenderEngine;\n\nconst PatternPreview: FunctionComponent<Props> = ({\n  patternId,\n  variantId,\n  variant,\n  ...variables\n}) => {\n  const finalPatternId = typeof variant !== 'undefined' ? variant?.getPattern().getId() : patternId;\n  const finalVariantId = typeof variant !== 'undefined' ? variant?.getId() : variantId;\n\n  if (!finalPatternId) {\n    return null;\n  }\n\n  return renderer.renderPatternPreview(finalPatternId, variables, finalVariantId);\n};\n\nPatternPreview.displayName = 'PatternPreview';\n\nPatternPreview.defaultProps = {\n  patternId: '',\n  variantId: '',\n  variant: undefined,\n};\n\nexport default PatternPreview;\n","import * as BaseRenderEngine from \"./baseRenderEngine\";\n\nimport IPatternStorage from \"./IPatternStorage\";\nimport { OptionsConfiguration } from \"./definition\";\nimport PatternStorage from \"./PatternStorage\";\nimport PatternVariant from \"./PatternVariant\";\nimport Setting from \"./Setting\";\n\nexport type { AddonPatternOptions } from \"./definition\";\nexport type { default as IPatternStorage } from \"./IPatternStorage\";\nexport { default as Pattern } from \"./Pattern\";\nexport { default as PatternVariant } from \"./PatternVariant\";\nexport { default as PatternPreview } from \"./PatternPreview\";\n\nexport type { default as IRenderer } from \"./IRenderer\";\n\nexport const storage: PatternStorage = PatternStorage.getInstance();\nexport const renderer = BaseRenderEngine;\n\nexport function getStorage(): IPatternStorage {\n  return storage;\n}\n\nfunction getStorybookControlsOptions(setting: Setting) {\n  const options = setting.getOptions();\n  let controls: Record<string, any> = {};\n\n  if (setting.isRequired() === false) {\n    controls = {\n      \"\": \"Empty\",\n    };\n  }\n\n  Object.keys(options).forEach((key) => {\n    if (typeof options[key] === \"object\") {\n      const option = options[key] as OptionsConfiguration;\n      controls[key] = option.label;\n    } else {\n      controls[key] = options[key];\n    }\n  });\n\n  return controls;\n}\n\nexport function argTypes(patternId: string, variantId: string) {\n  let variant: PatternVariant;\n\n  try {\n    variant = storage.loadVariant(patternId, variantId);\n  } catch (e) {\n    return {};\n  }\n\n  const resultArgTypes: any = {};\n  Object.keys(variant.getSettings()).forEach((key) => {\n    const setting = variant.getSetting(key);\n    if (\n      setting.isEnable() &&\n      setting.getType() !== \"group\" &&\n      setting.getType() !== \"media_library\"\n    ) {\n      resultArgTypes[key] = {\n        name: key,\n        type: {\n          type: \"string\",\n          required: setting.isRequired(),\n        },\n        table: {\n          defaultValue: { summary: setting.getPreview() },\n          category: \"Settings\",\n        },\n        defaultValue: setting.getDefaultValue(),\n        description: `${setting.getLabel()} ${\n          setting.getDescription() !== \"\"\n            ? ` - ${setting.getDescription()}`\n            : \"\"\n        }`,\n      };\n      if (\n        setting.getType() === \"select\" ||\n        setting.getType() === \"radios\" ||\n        setting.getType() === \"colorwidget\"\n      ) {\n        resultArgTypes[key].type.name = \"enum\";\n        resultArgTypes[key].description += `<br>Option keys: ${Object.keys(\n          setting.getOptions()\n        ).join(\", \")}`;\n        resultArgTypes[key].options = Object.keys(\n          getStorybookControlsOptions(setting)\n        );\n        resultArgTypes[key].control = {\n          labels: getStorybookControlsOptions(setting),\n          type: setting.getType() === \"radio\" ? \"radio\" : \"select\",\n        };\n      } else if (setting.getType() === \"boolean\") {\n        resultArgTypes[key].type.name = \"boolean\";\n        resultArgTypes[key].control = {\n          type: \"boolean\",\n        };\n      } else if (setting.getType() === \"number\") {\n        resultArgTypes[key].type.name = \"number\";\n        resultArgTypes[key].control = {\n          type: \"number\",\n        };\n      } else {\n        resultArgTypes[key].type.name = \"string\";\n        resultArgTypes[key].control = {\n          type: \"text\",\n        };\n      }\n    } else {\n      resultArgTypes[key] = {\n        table: {\n          disable: true,\n        },\n      };\n    }\n  });\n\n  Object.keys(variant.getFields()).forEach((key) => {\n    const field = variant.getField(key);\n    if (field.isEnable()) {\n      resultArgTypes[key] = {\n        name: key,\n        table: {\n          category: \"Fields\",\n        },\n        type: {\n          required: false,\n        },\n        defaultValue: field.getPreview(),\n        description: `${field.getLabel()} ${\n          field.getDescription() !== \"\" ? ` - ${field.getDescription()}` : \"\"\n        }`,\n      };\n      if (field.getType() === \"object\") {\n        resultArgTypes[key].type.name = \"object\";\n        resultArgTypes[key].control = {\n          type: \"object\",\n        };\n      } else if (\n        field.getType() === \"pattern\" ||\n        field.getType() === \"media_library\"\n      ) {\n        resultArgTypes[key].type.name = \"boolean\";\n        resultArgTypes[key].defaultValue = true;\n        resultArgTypes[key].control = {\n          type: \"boolean\",\n        };\n      } else {\n        resultArgTypes[key].type.name = \"string\";\n        resultArgTypes[key].control = {\n          type: \"text\",\n        };\n      }\n    } else {\n      resultArgTypes[key] = {\n        table: {\n          disable: true,\n        },\n      };\n    }\n  });\n  resultArgTypes.patternId = {\n    table: {\n      disable: true,\n    },\n  };\n  resultArgTypes.variantId = {\n    table: {\n      disable: true,\n    },\n  };\n  resultArgTypes.variant = {\n    table: {\n      disable: true,\n    },\n  };\n  return resultArgTypes;\n}\n\nexport function args(defaultArgs: any, patternId: string, variantId: string) {\n  let variant: PatternVariant;\n\n  try {\n    variant = storage.loadVariant(patternId, variantId);\n  } catch (e) {\n    return {};\n  }\n\n  const fields = variant.getFields();\n  const resultArgs = {\n    ...defaultArgs,\n    ...variant.getVariables(true, true, false),\n  };\n  Object.keys(fields).forEach((key) => {\n    const field = fields[key];\n    if (field.getType() === \"pattern\") {\n      if (resultArgs[key] === false) {\n        resultArgs[key] = null;\n      } else {\n        delete resultArgs[key];\n      }\n    }\n  });\n  return resultArgs;\n}\n"]}